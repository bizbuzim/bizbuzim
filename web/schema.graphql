schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "expenses"
"""
type expenses {
  created_at: timestamp!
  created_by: String!
  description: String!
  external_channel_id: String
  id: uuid!
  name: String!
  payment: String!
  price: numeric!
  tags: _text!
}

"""
aggregated selection of "expenses"
"""
type expenses_aggregate {
  aggregate: expenses_aggregate_fields
  nodes: [expenses!]!
}

"""
aggregate fields of "expenses"
"""
type expenses_aggregate_fields {
  avg: expenses_avg_fields
  count(columns: [expenses_select_column!], distinct: Boolean): Int!
  max: expenses_max_fields
  min: expenses_min_fields
  stddev: expenses_stddev_fields
  stddev_pop: expenses_stddev_pop_fields
  stddev_samp: expenses_stddev_samp_fields
  sum: expenses_sum_fields
  var_pop: expenses_var_pop_fields
  var_samp: expenses_var_samp_fields
  variance: expenses_variance_fields
}

"""aggregate avg on columns"""
type expenses_avg_fields {
  price: Float
}

"""
Boolean expression to filter rows from the table "expenses". All fields are combined with a logical 'AND'.
"""
input expenses_bool_exp {
  _and: [expenses_bool_exp!]
  _not: expenses_bool_exp
  _or: [expenses_bool_exp!]
  created_at: timestamp_comparison_exp
  created_by: String_comparison_exp
  description: String_comparison_exp
  external_channel_id: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  payment: String_comparison_exp
  price: numeric_comparison_exp
  tags: _text_comparison_exp
}

"""
unique or primary key constraints on table "expenses"
"""
enum expenses_constraint {
  """unique or primary key constraint"""
  PK_expenses_id
}

"""
input type for incrementing numeric columns in table "expenses"
"""
input expenses_inc_input {
  price: numeric
}

"""
input type for inserting data into table "expenses"
"""
input expenses_insert_input {
  created_at: timestamp
  created_by: String
  description: String
  external_channel_id: String
  id: uuid
  name: String
  payment: String
  price: numeric
  tags: _text
}

"""aggregate max on columns"""
type expenses_max_fields {
  created_at: timestamp
  created_by: String
  description: String
  external_channel_id: String
  id: uuid
  name: String
  payment: String
  price: numeric
}

"""aggregate min on columns"""
type expenses_min_fields {
  created_at: timestamp
  created_by: String
  description: String
  external_channel_id: String
  id: uuid
  name: String
  payment: String
  price: numeric
}

"""
response of any mutation on the table "expenses"
"""
type expenses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [expenses!]!
}

"""
on_conflict condition type for table "expenses"
"""
input expenses_on_conflict {
  constraint: expenses_constraint!
  update_columns: [expenses_update_column!]! = []
  where: expenses_bool_exp
}

"""Ordering options when selecting data from "expenses"."""
input expenses_order_by {
  created_at: order_by
  created_by: order_by
  description: order_by
  external_channel_id: order_by
  id: order_by
  name: order_by
  payment: order_by
  price: order_by
  tags: order_by
}

"""primary key columns input for table: expenses"""
input expenses_pk_columns_input {
  id: uuid!
}

"""
select columns of table "expenses"
"""
enum expenses_select_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  description

  """column name"""
  external_channel_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  payment

  """column name"""
  price

  """column name"""
  tags
}

"""
input type for updating data in table "expenses"
"""
input expenses_set_input {
  created_at: timestamp
  created_by: String
  description: String
  external_channel_id: String
  id: uuid
  name: String
  payment: String
  price: numeric
  tags: _text
}

"""aggregate stddev on columns"""
type expenses_stddev_fields {
  price: Float
}

"""aggregate stddev_pop on columns"""
type expenses_stddev_pop_fields {
  price: Float
}

"""aggregate stddev_samp on columns"""
type expenses_stddev_samp_fields {
  price: Float
}

"""aggregate sum on columns"""
type expenses_sum_fields {
  price: numeric
}

"""
update columns of table "expenses"
"""
enum expenses_update_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  description

  """column name"""
  external_channel_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  payment

  """column name"""
  price

  """column name"""
  tags
}

"""aggregate var_pop on columns"""
type expenses_var_pop_fields {
  price: Float
}

"""aggregate var_samp on columns"""
type expenses_var_samp_fields {
  price: Float
}

"""aggregate variance on columns"""
type expenses_variance_fields {
  price: Float
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "expenses"
  """
  delete_expenses(
    """filter the rows which have to be deleted"""
    where: expenses_bool_exp!
  ): expenses_mutation_response

  """
  delete single row from the table: "expenses"
  """
  delete_expenses_by_pk(id: uuid!): expenses

  """
  delete data from the table: "sources"
  """
  delete_sources(
    """filter the rows which have to be deleted"""
    where: sources_bool_exp!
  ): sources_mutation_response

  """
  delete single row from the table: "sources"
  """
  delete_sources_by_pk(id: uuid!): sources

  """
  insert data into the table: "expenses"
  """
  insert_expenses(
    """the rows to be inserted"""
    objects: [expenses_insert_input!]!

    """upsert condition"""
    on_conflict: expenses_on_conflict
  ): expenses_mutation_response

  """
  insert a single row into the table: "expenses"
  """
  insert_expenses_one(
    """the row to be inserted"""
    object: expenses_insert_input!

    """upsert condition"""
    on_conflict: expenses_on_conflict
  ): expenses

  """
  insert data into the table: "sources"
  """
  insert_sources(
    """the rows to be inserted"""
    objects: [sources_insert_input!]!

    """upsert condition"""
    on_conflict: sources_on_conflict
  ): sources_mutation_response

  """
  insert a single row into the table: "sources"
  """
  insert_sources_one(
    """the row to be inserted"""
    object: sources_insert_input!

    """upsert condition"""
    on_conflict: sources_on_conflict
  ): sources

  """
  update data of the table: "expenses"
  """
  update_expenses(
    """increments the numeric columns with given value of the filtered values"""
    _inc: expenses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: expenses_set_input

    """filter the rows which have to be updated"""
    where: expenses_bool_exp!
  ): expenses_mutation_response

  """
  update single row of the table: "expenses"
  """
  update_expenses_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: expenses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: expenses_set_input
    pk_columns: expenses_pk_columns_input!
  ): expenses

  """
  update data of the table: "sources"
  """
  update_sources(
    """sets the columns of the filtered rows to the given values"""
    _set: sources_set_input

    """filter the rows which have to be updated"""
    where: sources_bool_exp!
  ): sources_mutation_response

  """
  update single row of the table: "sources"
  """
  update_sources_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sources_set_input
    pk_columns: sources_pk_columns_input!
  ): sources
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "expenses"
  """
  expenses(
    """distinct select on columns"""
    distinct_on: [expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_order_by!]

    """filter the rows returned"""
    where: expenses_bool_exp
  ): [expenses!]!

  """
  fetch aggregated fields from the table: "expenses"
  """
  expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_order_by!]

    """filter the rows returned"""
    where: expenses_bool_exp
  ): expenses_aggregate!

  """fetch data from the table: "expenses" using primary key columns"""
  expenses_by_pk(id: uuid!): expenses

  """
  fetch data from the table: "sources"
  """
  sources(
    """distinct select on columns"""
    distinct_on: [sources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sources_order_by!]

    """filter the rows returned"""
    where: sources_bool_exp
  ): [sources!]!

  """
  fetch aggregated fields from the table: "sources"
  """
  sources_aggregate(
    """distinct select on columns"""
    distinct_on: [sources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sources_order_by!]

    """filter the rows returned"""
    where: sources_bool_exp
  ): sources_aggregate!

  """fetch data from the table: "sources" using primary key columns"""
  sources_by_pk(id: uuid!): sources
}

"""
columns and relationships of "sources"
"""
type sources {
  configuration(
    """JSON select path"""
    path: String
  ): json!
  external_id: String!
  id: uuid!
  name: String!
  source: String!
}

"""
aggregated selection of "sources"
"""
type sources_aggregate {
  aggregate: sources_aggregate_fields
  nodes: [sources!]!
}

"""
aggregate fields of "sources"
"""
type sources_aggregate_fields {
  count(columns: [sources_select_column!], distinct: Boolean): Int!
  max: sources_max_fields
  min: sources_min_fields
}

"""
Boolean expression to filter rows from the table "sources". All fields are combined with a logical 'AND'.
"""
input sources_bool_exp {
  _and: [sources_bool_exp!]
  _not: sources_bool_exp
  _or: [sources_bool_exp!]
  configuration: json_comparison_exp
  external_id: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  source: String_comparison_exp
}

"""
unique or primary key constraints on table "sources"
"""
enum sources_constraint {
  """unique or primary key constraint"""
  PK_sources_id
}

"""
input type for inserting data into table "sources"
"""
input sources_insert_input {
  configuration: json
  external_id: String
  id: uuid
  name: String
  source: String
}

"""aggregate max on columns"""
type sources_max_fields {
  external_id: String
  id: uuid
  name: String
  source: String
}

"""aggregate min on columns"""
type sources_min_fields {
  external_id: String
  id: uuid
  name: String
  source: String
}

"""
response of any mutation on the table "sources"
"""
type sources_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sources!]!
}

"""
on_conflict condition type for table "sources"
"""
input sources_on_conflict {
  constraint: sources_constraint!
  update_columns: [sources_update_column!]! = []
  where: sources_bool_exp
}

"""Ordering options when selecting data from "sources"."""
input sources_order_by {
  configuration: order_by
  external_id: order_by
  id: order_by
  name: order_by
  source: order_by
}

"""primary key columns input for table: sources"""
input sources_pk_columns_input {
  id: uuid!
}

"""
select columns of table "sources"
"""
enum sources_select_column {
  """column name"""
  configuration

  """column name"""
  external_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  source
}

"""
input type for updating data in table "sources"
"""
input sources_set_input {
  configuration: json
  external_id: String
  id: uuid
  name: String
  source: String
}

"""
update columns of table "sources"
"""
enum sources_update_column {
  """column name"""
  configuration

  """column name"""
  external_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  source
}

type subscription_root {
  """
  fetch data from the table: "expenses"
  """
  expenses(
    """distinct select on columns"""
    distinct_on: [expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_order_by!]

    """filter the rows returned"""
    where: expenses_bool_exp
  ): [expenses!]!

  """
  fetch aggregated fields from the table: "expenses"
  """
  expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [expenses_order_by!]

    """filter the rows returned"""
    where: expenses_bool_exp
  ): expenses_aggregate!

  """fetch data from the table: "expenses" using primary key columns"""
  expenses_by_pk(id: uuid!): expenses

  """
  fetch data from the table: "sources"
  """
  sources(
    """distinct select on columns"""
    distinct_on: [sources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sources_order_by!]

    """filter the rows returned"""
    where: sources_bool_exp
  ): [sources!]!

  """
  fetch aggregated fields from the table: "sources"
  """
  sources_aggregate(
    """distinct select on columns"""
    distinct_on: [sources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sources_order_by!]

    """filter the rows returned"""
    where: sources_bool_exp
  ): sources_aggregate!

  """fetch data from the table: "sources" using primary key columns"""
  sources_by_pk(id: uuid!): sources
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

