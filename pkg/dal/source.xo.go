package dal

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// Source represents a row from 'public.sources'.
type Source struct {
	ID            uuid.UUID `json:"id"`            // id
	Name          string    `json:"name"`          // name
	Source        string    `json:"source"`        // source
	ExternalID    string    `json:"external_id"`   // external_id
	Configuration []byte    `json:"configuration"` // configuration
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Source exists in the database.
func (s *Source) Exists() bool {
	return s._exists
}

// Deleted returns true when the Source has been marked for deletion from
// the database.
func (s *Source) Deleted() bool {
	return s._deleted
}

// Insert inserts the Source to the database.
func (s *Source) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.sources (` +
		`id, name, source, external_id, configuration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, s.ID, s.Name, s.Source, s.ExternalID, s.Configuration)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.Name, s.Source, s.ExternalID, s.Configuration); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a Source in the database.
func (s *Source) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.sources SET ` +
		`name = $1, source = $2, external_id = $3, configuration = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, s.Name, s.Source, s.ExternalID, s.Configuration, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.Name, s.Source, s.ExternalID, s.Configuration, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Source to the database.
func (s *Source) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for Source.
func (s *Source) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.sources (` +
		`id, name, source, external_id, configuration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, source = EXCLUDED.source, external_id = EXCLUDED.external_id, configuration = EXCLUDED.configuration `
	// run
	logf(sqlstr, s.ID, s.Name, s.Source, s.ExternalID, s.Configuration)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.Name, s.Source, s.ExternalID, s.Configuration); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the Source from the database.
func (s *Source) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.sources ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SourceByPKSourcesID retrieves a row from 'public.sources' as a Source.
//
// Generated from index 'PK_sources_id'.
func SourceByPKSourcesID(ctx context.Context, db DB, id uuid.UUID) (*Source, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, source, external_id, configuration ` +
		`FROM public.sources ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Source{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.Name, &s.Source, &s.ExternalID, &s.Configuration); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// SourcesByIdxSourceExternalID retrieves a row from 'public.sources' as a Source.
//
// Generated from index 'idx_source_external_id'.
func SourcesByIdxSourceExternalID(ctx context.Context, db DB, externalID string) ([]*Source, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, source, external_id, configuration ` +
		`FROM public.sources ` +
		`WHERE external_id = $1`
	// run
	logf(sqlstr, externalID)
	rows, err := db.QueryContext(ctx, sqlstr, externalID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Source
	for rows.Next() {
		s := Source{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ID, &s.Name, &s.Source, &s.ExternalID, &s.Configuration); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
