package dal

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// Expense represents a row from 'public.expenses'.
type Expense struct {
	ID          uuid.UUID   `json:"id"`          // id
	Name        string      `json:"name"`        // name
	Payment     string      `json:"payment"`     // payment
	Price       float64     `json:"price"`       // price
	Tags        StringSlice `json:"tags"`        // tags
	Description string      `json:"description"` // description
	CreatedAt   time.Time   `json:"created_at"`  // created_at
	CreatedBy   string      `json:"created_by"`  // created_by
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Expense exists in the database.
func (e *Expense) Exists() bool {
	return e._exists
}

// Deleted returns true when the Expense has been marked for deletion from
// the database.
func (e *Expense) Deleted() bool {
	return e._deleted
}

// Insert inserts the Expense to the database.
func (e *Expense) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.expenses (` +
		`id, name, payment, price, tags, description, created_at, created_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, e.ID, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a Expense in the database.
func (e *Expense) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.expenses SET ` +
		`name = $1, payment = $2, price = $3, tags = $4, description = $5, created_at = $6, created_by = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy, e.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Expense to the database.
func (e *Expense) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for Expense.
func (e *Expense) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.expenses (` +
		`id, name, payment, price, tags, description, created_at, created_by` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, payment = EXCLUDED.payment, price = EXCLUDED.price, tags = EXCLUDED.tags, description = EXCLUDED.description, created_at = EXCLUDED.created_at, created_by = EXCLUDED.created_by `
	// run
	logf(sqlstr, e.ID, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Name, e.Payment, e.Price, e.Tags, e.Description, e.CreatedAt, e.CreatedBy); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the Expense from the database.
func (e *Expense) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.expenses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// ExpenseByID retrieves a row from 'public.expenses' as a Expense.
//
// Generated from index 'PK_expenses_id'.
func ExpenseByID(ctx context.Context, db DB, id uuid.UUID) (*Expense, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, payment, price, tags, description, created_at, created_by ` +
		`FROM public.expenses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	e := Expense{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.Name, &e.Payment, &e.Price, &e.Tags, &e.Description, &e.CreatedAt, &e.CreatedBy); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
