package dal

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/google/uuid"
)

// ChannelConfiguration represents a row from 'public.channel_configurations'.
type ChannelConfiguration struct {
	ID            uuid.UUID `json:"id"`            // id
	Name          string    `json:"name"`          // name
	Source        string    `json:"source"`        // source
	ExternalID    string    `json:"external_id"`   // external_id
	Configuration []byte    `json:"configuration"` // configuration
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ChannelConfiguration exists in the database.
func (cc *ChannelConfiguration) Exists() bool {
	return cc._exists
}

// Deleted returns true when the ChannelConfiguration has been marked for deletion from
// the database.
func (cc *ChannelConfiguration) Deleted() bool {
	return cc._deleted
}

// Insert inserts the ChannelConfiguration to the database.
func (cc *ChannelConfiguration) Insert(ctx context.Context, db DB) error {
	switch {
	case cc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.channel_configurations (` +
		`id, name, source, external_id, configuration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`
	// run
	logf(sqlstr, cc.ID, cc.Name, cc.Source, cc.ExternalID, cc.Configuration)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID, cc.Name, cc.Source, cc.ExternalID, cc.Configuration); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Update updates a ChannelConfiguration in the database.
func (cc *ChannelConfiguration) Update(ctx context.Context, db DB) error {
	switch {
	case !cc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.channel_configurations SET ` +
		`name = $1, source = $2, external_id = $3, configuration = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, cc.Name, cc.Source, cc.ExternalID, cc.Configuration, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.Name, cc.Source, cc.ExternalID, cc.Configuration, cc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ChannelConfiguration to the database.
func (cc *ChannelConfiguration) Save(ctx context.Context, db DB) error {
	if cc.Exists() {
		return cc.Update(ctx, db)
	}
	return cc.Insert(ctx, db)
}

// Upsert performs an upsert for ChannelConfiguration.
func (cc *ChannelConfiguration) Upsert(ctx context.Context, db DB) error {
	switch {
	case cc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.channel_configurations (` +
		`id, name, source, external_id, configuration` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, source = EXCLUDED.source, external_id = EXCLUDED.external_id, configuration = EXCLUDED.configuration `
	// run
	logf(sqlstr, cc.ID, cc.Name, cc.Source, cc.ExternalID, cc.Configuration)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID, cc.Name, cc.Source, cc.ExternalID, cc.Configuration); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Delete deletes the ChannelConfiguration from the database.
func (cc *ChannelConfiguration) Delete(ctx context.Context, db DB) error {
	switch {
	case !cc._exists: // doesn't exist
		return nil
	case cc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.channel_configurations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cc._deleted = true
	return nil
}

// ChannelConfigurationByID retrieves a row from 'public.channel_configurations' as a ChannelConfiguration.
//
// Generated from index 'PK_channel_configurations_id'.
func ChannelConfigurationByID(ctx context.Context, db DB, id uuid.UUID) (*ChannelConfiguration, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, source, external_id, configuration ` +
		`FROM public.channel_configurations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	cc := ChannelConfiguration{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cc.ID, &cc.Name, &cc.Source, &cc.ExternalID, &cc.Configuration); err != nil {
		return nil, logerror(err)
	}
	return &cc, nil
}
