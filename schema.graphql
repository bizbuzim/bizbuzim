"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Expense`."""
  allExpenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Expense`."""
    orderBy: [ExpensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ExpenseCondition
  ): ExpensesConnection

  """Reads and enables pagination through a set of `RawExpense`."""
  allRawExpenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RawExpense`."""
    orderBy: [RawExpensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RawExpenseCondition
  ): RawExpensesConnection

  """Reads and enables pagination through a set of `SchemaMigration`."""
  allSchemaMigrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SchemaMigration`."""
    orderBy: [SchemaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchemaMigrationCondition
  ): SchemaMigrationsConnection
  expenseById(id: UUID!): Expense
  rawExpenseById(id: UUID!): RawExpense
  schemaMigrationByVersion(version: BigInt!): SchemaMigration

  """Reads a single `Expense` using its globally unique `ID`."""
  expense(
    """The globally unique `ID` to be used in selecting a single `Expense`."""
    nodeId: ID!
  ): Expense

  """Reads a single `RawExpense` using its globally unique `ID`."""
  rawExpense(
    """
    The globally unique `ID` to be used in selecting a single `RawExpense`.
    """
    nodeId: ID!
  ): RawExpense

  """Reads a single `SchemaMigration` using its globally unique `ID`."""
  schemaMigration(
    """
    The globally unique `ID` to be used in selecting a single `SchemaMigration`.
    """
    nodeId: ID!
  ): SchemaMigration
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Expense` values."""
type ExpensesConnection {
  """A list of `Expense` objects."""
  nodes: [Expense]!

  """
  A list of edges which contains the `Expense` and cursor to aid in pagination.
  """
  edges: [ExpensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Expense` you could get from the connection."""
  totalCount: Int!
}

type Expense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  payment: String!
  price: BigFloat!
  tags: [String]!
  description: String!
  createdAt: Datetime!
  createdBy: String!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A `Expense` edge in the connection."""
type ExpensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Expense` at the end of the edge."""
  node: Expense
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Expense`."""
enum ExpensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PAYMENT_ASC
  PAYMENT_DESC
  PRICE_ASC
  PRICE_DESC
  TAGS_ASC
  TAGS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Expense` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ExpenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `payment` field."""
  payment: String

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String
}

"""A connection to a list of `RawExpense` values."""
type RawExpensesConnection {
  """A list of `RawExpense` objects."""
  nodes: [RawExpense]!

  """
  A list of edges which contains the `RawExpense` and cursor to aid in pagination.
  """
  edges: [RawExpensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RawExpense` you could get from the connection."""
  totalCount: Int!
}

type RawExpense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  text: String!
  createdAt: Datetime!
  createdBy: String!
}

"""A `RawExpense` edge in the connection."""
type RawExpensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RawExpense` at the end of the edge."""
  node: RawExpense
}

"""Methods to use when ordering `RawExpense`."""
enum RawExpensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEXT_ASC
  TEXT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RawExpense` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RawExpenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String
}

"""A connection to a list of `SchemaMigration` values."""
type SchemaMigrationsConnection {
  """A list of `SchemaMigration` objects."""
  nodes: [SchemaMigration]!

  """
  A list of edges which contains the `SchemaMigration` and cursor to aid in pagination.
  """
  edges: [SchemaMigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SchemaMigration` you could get from the connection.
  """
  totalCount: Int!
}

type SchemaMigration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  version: BigInt!
  dirty: Boolean!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A `SchemaMigration` edge in the connection."""
type SchemaMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SchemaMigration` at the end of the edge."""
  node: SchemaMigration
}

"""Methods to use when ordering `SchemaMigration`."""
enum SchemaMigrationsOrderBy {
  NATURAL
  VERSION_ASC
  VERSION_DESC
  DIRTY_ASC
  DIRTY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SchemaMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SchemaMigrationCondition {
  """Checks for equality with the object’s `version` field."""
  version: BigInt

  """Checks for equality with the object’s `dirty` field."""
  dirty: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Expense`."""
  createExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateExpenseInput!
  ): CreateExpensePayload

  """Creates a single `RawExpense`."""
  createRawExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRawExpenseInput!
  ): CreateRawExpensePayload

  """Creates a single `SchemaMigration`."""
  createSchemaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSchemaMigrationInput!
  ): CreateSchemaMigrationPayload

  """Updates a single `Expense` using its globally unique id and a patch."""
  updateExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateExpenseInput!
  ): UpdateExpensePayload

  """Updates a single `Expense` using a unique key and a patch."""
  updateExpenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateExpenseByIdInput!
  ): UpdateExpensePayload

  """
  Updates a single `RawExpense` using its globally unique id and a patch.
  """
  updateRawExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRawExpenseInput!
  ): UpdateRawExpensePayload

  """Updates a single `RawExpense` using a unique key and a patch."""
  updateRawExpenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRawExpenseByIdInput!
  ): UpdateRawExpensePayload

  """
  Updates a single `SchemaMigration` using its globally unique id and a patch.
  """
  updateSchemaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchemaMigrationInput!
  ): UpdateSchemaMigrationPayload

  """Updates a single `SchemaMigration` using a unique key and a patch."""
  updateSchemaMigrationByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchemaMigrationByVersionInput!
  ): UpdateSchemaMigrationPayload

  """Deletes a single `Expense` using its globally unique id."""
  deleteExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteExpenseInput!
  ): DeleteExpensePayload

  """Deletes a single `Expense` using a unique key."""
  deleteExpenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteExpenseByIdInput!
  ): DeleteExpensePayload

  """Deletes a single `RawExpense` using its globally unique id."""
  deleteRawExpense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRawExpenseInput!
  ): DeleteRawExpensePayload

  """Deletes a single `RawExpense` using a unique key."""
  deleteRawExpenseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRawExpenseByIdInput!
  ): DeleteRawExpensePayload

  """Deletes a single `SchemaMigration` using its globally unique id."""
  deleteSchemaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchemaMigrationInput!
  ): DeleteSchemaMigrationPayload

  """Deletes a single `SchemaMigration` using a unique key."""
  deleteSchemaMigrationByVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchemaMigrationByVersionInput!
  ): DeleteSchemaMigrationPayload
}

"""The output of our create `Expense` mutation."""
type CreateExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expense` that was created by this mutation."""
  expense: Expense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Expense`. May be used by Relay 1."""
  expenseEdge(
    """The method to use when ordering `Expense`."""
    orderBy: [ExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ExpensesEdge
}

"""All input for the create `Expense` mutation."""
input CreateExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Expense` to be created by this mutation."""
  expense: ExpenseInput!
}

"""An input for mutations affecting `Expense`"""
input ExpenseInput {
  id: UUID
  name: String!
  payment: String!
  price: BigFloat!
  tags: [String]!
  description: String
  createdAt: Datetime
  createdBy: String!
}

"""The output of our create `RawExpense` mutation."""
type CreateRawExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawExpense` that was created by this mutation."""
  rawExpense: RawExpense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RawExpense`. May be used by Relay 1."""
  rawExpenseEdge(
    """The method to use when ordering `RawExpense`."""
    orderBy: [RawExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawExpensesEdge
}

"""All input for the create `RawExpense` mutation."""
input CreateRawExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RawExpense` to be created by this mutation."""
  rawExpense: RawExpenseInput!
}

"""An input for mutations affecting `RawExpense`"""
input RawExpenseInput {
  id: UUID
  text: String!
  createdAt: Datetime
  createdBy: String!
}

"""The output of our create `SchemaMigration` mutation."""
type CreateSchemaMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SchemaMigration` that was created by this mutation."""
  schemaMigration: SchemaMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SchemaMigration`. May be used by Relay 1."""
  schemaMigrationEdge(
    """The method to use when ordering `SchemaMigration`."""
    orderBy: [SchemaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchemaMigrationsEdge
}

"""All input for the create `SchemaMigration` mutation."""
input CreateSchemaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SchemaMigration` to be created by this mutation."""
  schemaMigration: SchemaMigrationInput!
}

"""An input for mutations affecting `SchemaMigration`"""
input SchemaMigrationInput {
  version: BigInt!
  dirty: Boolean!
}

"""The output of our update `Expense` mutation."""
type UpdateExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expense` that was updated by this mutation."""
  expense: Expense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Expense`. May be used by Relay 1."""
  expenseEdge(
    """The method to use when ordering `Expense`."""
    orderBy: [ExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ExpensesEdge
}

"""All input for the `updateExpense` mutation."""
input UpdateExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Expense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Expense` being updated.
  """
  expensePatch: ExpensePatch!
}

"""
Represents an update to a `Expense`. Fields that are set will be updated.
"""
input ExpensePatch {
  id: UUID
  name: String
  payment: String
  price: BigFloat
  tags: [String]
  description: String
  createdAt: Datetime
  createdBy: String
}

"""All input for the `updateExpenseById` mutation."""
input UpdateExpenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Expense` being updated.
  """
  expensePatch: ExpensePatch!
  id: UUID!
}

"""The output of our update `RawExpense` mutation."""
type UpdateRawExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawExpense` that was updated by this mutation."""
  rawExpense: RawExpense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RawExpense`. May be used by Relay 1."""
  rawExpenseEdge(
    """The method to use when ordering `RawExpense`."""
    orderBy: [RawExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawExpensesEdge
}

"""All input for the `updateRawExpense` mutation."""
input UpdateRawExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RawExpense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RawExpense` being updated.
  """
  rawExpensePatch: RawExpensePatch!
}

"""
Represents an update to a `RawExpense`. Fields that are set will be updated.
"""
input RawExpensePatch {
  id: UUID
  text: String
  createdAt: Datetime
  createdBy: String
}

"""All input for the `updateRawExpenseById` mutation."""
input UpdateRawExpenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RawExpense` being updated.
  """
  rawExpensePatch: RawExpensePatch!
  id: UUID!
}

"""The output of our update `SchemaMigration` mutation."""
type UpdateSchemaMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SchemaMigration` that was updated by this mutation."""
  schemaMigration: SchemaMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SchemaMigration`. May be used by Relay 1."""
  schemaMigrationEdge(
    """The method to use when ordering `SchemaMigration`."""
    orderBy: [SchemaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchemaMigrationsEdge
}

"""All input for the `updateSchemaMigration` mutation."""
input UpdateSchemaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SchemaMigration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SchemaMigration` being updated.
  """
  schemaMigrationPatch: SchemaMigrationPatch!
}

"""
Represents an update to a `SchemaMigration`. Fields that are set will be updated.
"""
input SchemaMigrationPatch {
  version: BigInt
  dirty: Boolean
}

"""All input for the `updateSchemaMigrationByVersion` mutation."""
input UpdateSchemaMigrationByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SchemaMigration` being updated.
  """
  schemaMigrationPatch: SchemaMigrationPatch!
  version: BigInt!
}

"""The output of our delete `Expense` mutation."""
type DeleteExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expense` that was deleted by this mutation."""
  expense: Expense
  deletedExpenseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Expense`. May be used by Relay 1."""
  expenseEdge(
    """The method to use when ordering `Expense`."""
    orderBy: [ExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ExpensesEdge
}

"""All input for the `deleteExpense` mutation."""
input DeleteExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Expense` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteExpenseById` mutation."""
input DeleteExpenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `RawExpense` mutation."""
type DeleteRawExpensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RawExpense` that was deleted by this mutation."""
  rawExpense: RawExpense
  deletedRawExpenseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RawExpense`. May be used by Relay 1."""
  rawExpenseEdge(
    """The method to use when ordering `RawExpense`."""
    orderBy: [RawExpensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RawExpensesEdge
}

"""All input for the `deleteRawExpense` mutation."""
input DeleteRawExpenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RawExpense` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRawExpenseById` mutation."""
input DeleteRawExpenseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `SchemaMigration` mutation."""
type DeleteSchemaMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SchemaMigration` that was deleted by this mutation."""
  schemaMigration: SchemaMigration
  deletedSchemaMigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SchemaMigration`. May be used by Relay 1."""
  schemaMigrationEdge(
    """The method to use when ordering `SchemaMigration`."""
    orderBy: [SchemaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchemaMigrationsEdge
}

"""All input for the `deleteSchemaMigration` mutation."""
input DeleteSchemaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SchemaMigration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSchemaMigrationByVersion` mutation."""
input DeleteSchemaMigrationByVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  version: BigInt!
}
